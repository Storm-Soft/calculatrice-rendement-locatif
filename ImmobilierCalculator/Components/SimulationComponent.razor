@using ImmobilierCalculator.Application.ValueObjects
@using ImmobilierCalculator.Application.Calculatrices
@using Microsoft.AspNetCore.Components
@using Radzen


<RadzenTemplateForm Data="@this">
    <div class="row"> 
        <div class="col-md-6">
            <RadzenFieldset Text="Investissement">
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Montant du bien" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@MontantBien Max="1000000" />
                        <MatSlider @bind-Value="@MontantBien" ValueMin="0" ValueMax="1000000" />
                    </div>
                </div> 
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Localisation" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown TValue="Département" Style="width: 300px" @bind-Value=@Localisation
                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        LoadData=@ChargerDépartements  Data="@départements"/>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Frais de notaire" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric ShowUpDown="false" TValue="double" rea @bind-Value=@FraisNotariaux />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Montant des travaux" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@MontantTravaux Max="1000000" />
                        <MatSlider @bind-Value="@MontantTravaux" ValueMin="0" ValueMax="1000000" />
                    </div>
                </div>
            </RadzenFieldset>
            <RadzenFieldset Text="Prêt">
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Montant" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@MontantPret Max="@MontantPretMax"/>
                        <MatSlider @bind-Value="@MontantPret" ValueMin="0" ValueMax="@MontantPretMax" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Mensualités" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@Mensualites Max="5000"/>
                        <MatSlider @bind-Value="@Mensualites" ValueMin="0" ValueMax="5000" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Durée" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@Duree Max="360"/>
                        <MatSlider @bind-Value="@Duree" ValueMin="0" ValueMax="360" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Taux" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric ShowUpDown="false" TValue="double" @bind-Value=@Taux Max="2.0m"/>
                        <MatSlider @bind-Value="@Taux" ValueMin="0.0" ValueMax="2.0" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Taux assurance" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric ShowUpDown="false" TValue="double" @bind-Value=@Assurance Max="2.0m"/>
                        <MatSlider @bind-Value="@Assurance" ValueMin="0.0" ValueMax="2.0" />
                    </div>
                </div>
            </RadzenFieldset>
        </div>
        <div class="col-md-6">
            <RadzenFieldset Text="Location">
                <div class="row">
                    <div class="align-items-center d-flex col-md-2">
                        <RadzenLabel Text="Loyer" />
                    </div>
                    <div class="col-md-10">
                        <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@Loyer Max="@LoyerMax"/>
                        <MatSlider @bind-Value="@Loyer" ValueMin="0" ValueMax="@LoyerMax" />
                    </div>
                </div>
                <div class="row">
                    <div class="align-items-center d-flex col-md-2">
                        <RadzenLabel Text="Taxe Foncière" />
                    </div>
                    <div class="col-md-10">
                        <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@Taxe Max="10000"/>
                    </div>
                </div>
            </RadzenFieldset>
            <RadzenFieldset Text="Résultat de l'opération">
                <div class="row">
                    <div class="align-items-center d-flex col-md-2">
                        <RadzenLabel Text="Rendement estimé" />
                    </div>
                    <div class="col-md-10">
                        <RendementComponent @bind-Rendement="@rendement" @bind-RendementMaximum="@rendementMax" />
                    </div>
                </div>  <div class="row">
                    <div class="align-items-center d-flex col-md-2">
                        <RadzenLabel Text="Rendement estimé" />
                    </div>
                    <div class="col-md-10">
                        <ResulatOperationComponent @bind-MontantMensuel="@montantMensuel" />
                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </div>
</RadzenTemplateForm>
    
@code {

    private MontantBien montantBien = new MontantBien(0);
    public int MontantBien
    {
        get => montantBien.Round();
        set => Calculate(new MontantBien(value));
    }

    private IEnumerable<Département> départements = Départements.All();

    private Département localisation = Départements.Isère;

    public Département Localisation
    {
        get => localisation;
        set => Calculate(value);
    }
    private MontantTravaux montantTravaux = new MontantTravaux(0);
    public int MontantTravaux
    {
        get => montantTravaux.Round();
        set => Calculate(new MontantTravaux(value));
    }


    public double FraisNotariaux { get; set; }

    private bool pretParMensualite = false;

    private MontantPrêt montantPret = new MontantPrêt(0);
    public int MontantPret
    {
        get => montantPret.Round();
        set => Calculate(new MontantPrêt(value));
    }

    private MontantPrêt montantPretMax = new MontantPrêt(0);
    public int MontantPretMax { get; set; }

    private MontantEchéance mensualites = new MontantEchéance(0);

    public int Mensualites
    {
        get => mensualites.Round();
        set => Calculate(new MontantEchéance(value));
    }


    private DuréePrêt duree = new DuréePrêt(180);

    public int Duree
    {
        get => duree.NombreMois;
        set => Calculate(new DuréePrêt(value));
    }

    private TauxNetPrêt taux = new TauxNetPrêt(1d);

    public double Taux
    {
        get => taux.Valeur;
        set => Calculate(new TauxNetPrêt((double)value));
    }

    private TauxAssurancePrêt assurance = new TauxAssurancePrêt(0.2);

    public double Assurance
    {
        get => assurance.Valeur;
        set => Calculate(new TauxAssurancePrêt((double)value));
    }

    private Loyer loyer = new Loyer(0);

    public int Loyer
    {
        get => loyer.Round();
        set => Calculate(new Loyer(value));
    }

    public int LoyerMax { get; set; }

    private Taxe taxe = new Taxe(0);

    public int Taxe
    {
        get => taxe.Valeur;
        set => Calculate(new Taxe(value));
    }


    private Rendement rendement = new Rendement(0);
    private Rendement rendementMax = new Rendement(10);
    private MontantOpérationMensuel montantMensuel = new OperationNeutre();

    void Calculate(Prêt prêt, Taxe taxe, Loyer loyer, MontantBien montantBien, MontantTravaux montantTravaux, Département département)
    {
        var conditions = new ConditionLocative(loyer, new ChargeMensuelle(0), new Surface(0));

        var bien = new BienImmobilier(montantBien, montantTravaux, default, default, taxe, département);
        var calculatrice = new CalculatriceRendement();
        rendement = calculatrice.Calculer(bien, new[] { conditions });

        var loyerMax = calculatrice.Calculer(bien, rendementMax);

        montantMensuel = calculatrice.Calculer(prêt.Echéance, loyer);

        var fraisNotariaux = new CalculatriceFraisNotariaux().Calculer(bienImmobilier: new BienImmobilier(montantBien, default, default, default, default, Localisation: département));

        var montantPretMax = montantBien + montantTravaux + fraisNotariaux;
        Apply(prêt, taxe, loyer, rendement, loyerMax, montantBien, montantTravaux, fraisNotariaux, montantPretMax, département);
    }

    void Calculate(MontantBien montant)
        => Calculate(new CalculatricePrêt().Calculer(montantPret, duree, taux, assurance), taxe, loyer, montant, montantTravaux, localisation);

    void Calculate(Département localisation)
        => Calculate(new CalculatricePrêt().Calculer(montantPret, duree, taux, assurance), taxe, loyer, montantBien, montantTravaux,localisation);

    void Calculate(MontantTravaux montant)
        => Calculate(new CalculatricePrêt().Calculer(montantPret, duree, taux, assurance), taxe, loyer, montantBien, montant, localisation);

    void Calculate(MontantPrêt montant)
    {
        pretParMensualite = false;
        Calculate(new CalculatricePrêt().Calculer(montant, duree, taux, assurance), taxe, loyer, montantBien, montantTravaux, localisation);
    }

    void Calculate(MontantEchéance échéance)
    {
        pretParMensualite = true;
        Calculate(new CalculatricePrêt().Calculer(échéance, duree, taux, assurance), taxe, loyer, montantBien, montantTravaux, localisation);
    }

    void Calculate(DuréePrêt duree, TauxNetPrêt taux, TauxAssurancePrêt assurance)
    {
        if (pretParMensualite)
            Calculate(new CalculatricePrêt().Calculer(mensualites, duree, taux, assurance), taxe, loyer, montantBien, montantTravaux, localisation);
        else
            Calculate(new CalculatricePrêt().Calculer(montantPret, duree, taux, assurance), taxe, loyer, montantBien, montantTravaux, localisation);
    }

    void Calculate(DuréePrêt duree)
        => Calculate(duree, taux, assurance);

    void Calculate(TauxNetPrêt taux)
        => Calculate(duree, taux, assurance);

    void Calculate(TauxAssurancePrêt assurance)
        => Calculate(duree, taux, assurance);

    void Calculate(Taxe taxe)
        => Calculate(new CalculatricePrêt().Calculer(montantPret, duree, taux, assurance), taxe, loyer, montantBien, montantTravaux, localisation);

    void Calculate(Loyer loyer)
        => Calculate(new CalculatricePrêt().Calculer(montantPret, duree, taux, assurance), taxe, loyer, montantBien, montantTravaux, localisation);


    private void Apply(Prêt prêt, Taxe taxe, Loyer loyer, Rendement rendement, Loyer loyerMax, MontantBien montantBien, MontantTravaux montantTravaux, FraisNotariaux fraisNotariaux, Montant montantPrêtMax, Département localisation)
    {
        this.rendement = rendement;
        this.taxe = taxe;
        this.loyer = loyer;
        this.montantPret = prêt.Montant;
        this.mensualites = prêt.Echéance;
        this.duree = prêt.Durée;
        this.taux = prêt.Taux;
        this.assurance = prêt.TauxAssurance;
        this.LoyerMax = loyerMax.Round();
        FraisNotariaux = Math.Round(fraisNotariaux.Valeur, 2);
        this.MontantPretMax = montantPrêtMax.Round();
        this.montantBien = montantBien;
        this.montantTravaux = montantTravaux;
        this.localisation = localisation;
        StateHasChanged();
    }

    private Task ChargerDépartements(LoadDataArgs args)
    {
        départements = Départements.All();
        if (!string.IsNullOrEmpty(args.Filter))
        {
            var filter = args.Filter.ToLower();
            départements = Départements.All().Where(x => x.Numéro.ToLower().Contains(filter) || x.Nom.ToLower().Contains(filter));
        }
        return InvokeAsync(StateHasChanged);
    }
}



